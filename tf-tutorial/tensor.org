#+TITLE: Tensor
#+AUTHOR: Wei Sun (孙伟)
#+EMAIL: waysun@amazon.com
#+DATE: <2020-07-21 Tue>
#+CATEGORY:
#+FILETAGS:

* Tensor

** 生成 Tensor

*** tf.constant

#+begin_src ipython
  import tensorflow as tf
  import numpy as np

  print(tf.constant(1))
  print(tf.constant(1, dtype=tf.int64))
  print(tf.constant(1.0))
  print(tf.constant(1.0, dtype=tf.float64))
  print(tf.constant(1.0, dtype=tf.double))
  print(tf.constant("hello world"))
  print(tf.constant(True))
  print(tf.constant([1,2,3]))
  print(tf.constant([1,2,3],dtype=tf.float32))
  print(tf.constant([1,2,3,4],shape=(2,2),dtype=tf.float32))
  print(tf.constant([[1,2],[3,4]]))
#+end_src

#+RESULTS:
:results:
tf.Tensor(1, shape=(), dtype=int32)
tf.Tensor(1, shape=(), dtype=int64)
tf.Tensor(1.0, shape=(), dtype=float32)
tf.Tensor(1.0, shape=(), dtype=float64)
tf.Tensor(1.0, shape=(), dtype=float64)
tf.Tensor(b'hello world', shape=(), dtype=string)
tf.Tensor(True, shape=(), dtype=bool)
tf.Tensor([1 2 3], shape=(3,), dtype=int32)
tf.Tensor([1. 2. 3.], shape=(3,), dtype=float32)
tf.Tensor(
[[1. 2.]
 [3. 4.]], shape=(2, 2), dtype=float32)
tf.Tensor(
[[1 2]
 [3 4]], shape=(2, 2), dtype=int32)
(2,)
:end:

** 类型转换

*** cast

#+begin_src ipython
  a = tf.constant([0, 2, 3])
  print(a)
  print(tf.cast(a,tf.float32))
  print(tf.cast(a,tf.bool))

  a=tf.constant([0., 1., 2.])
  print(tf.cast(a, tf.int32))
#+end_src

#+RESULTS:
:results:
tf.Tensor([0 2 3], shape=(3,), dtype=int32)
tf.Tensor([0. 2. 3.], shape=(3,), dtype=float32)
tf.Tensor([False  True  True], shape=(3,), dtype=bool)
tf.Tensor([0 1 2], shape=(3,), dtype=int32)
:end:

*** bitcast

#+begin_src ipython
  a = tf.constant([0, 1, 2], dtype=tf.int32)
  print(a)
  # 每个 int32 被转换为 [byte_0, byte_1, byte_2, byte_3]
  print(tf.bitcast(a, tf.int8))
  # int8 转换为 int32, 则 shape[-1] 需要等于 4, 因为 4 个 int8 才能当作一个 int32
  a = tf.constant([0, 1, 0, 0], dtype=tf.int8)
  print(tf.bitcast(a, tf.int32))
#+end_src

#+RESULTS:
:results:
tf.Tensor([0 1 2], shape=(3,), dtype=int32)
tf.Tensor(
[[0 0 0 0]
 [1 0 0 0]
 [2 0 0 0]], shape=(3, 4), dtype=int8)
tf.Tensor(256, shape=(), dtype=int32)
:end:

*** convert_to_tensor
#+begin_src ipython
  print(tf.convert_to_tensor(1))
  print(tf.convert_to_tensor([1,2,3]))
  print(tf.convert_to_tensor(np.array([1,2,3])))
  print(tf.convert_to_tensor(tf.constant([1, 2, 3]).numpy()))
#+end_src

#+RESULTS:
:results:
tf.Tensor(1, shape=(), dtype=int32)
tf.Tensor([1 2 3], shape=(3,), dtype=int32)
tf.Tensor([1 2 3], shape=(3,), dtype=int64)
tf.Tensor([1 2 3], shape=(3,), dtype=int32)
:end:

** 操作大小

*** broadcast_to

#+begin_src ipython
  a = tf.constant([1, 2, 3])
  print(tf.broadcast_to(a, (2, 3)))

  # (x0,x1,x2) 能 broadcast_to (y0,y1,y2) 的条件是 x[i] == 1 或 x[i] == y[i]
  # 所以下面的函数会失败, (2,3) 无法 broadcast_to (4,3)
  # a = tf.constant([[1, 2, 3], [4, 5, 6]])
  # print(tf.broadcast_to(a, (4, 3)))
#+end_src

#+RESULTS:
:results:
tf.Tensor(
[[1 2 3]
 [1 2 3]], shape=(2, 3), dtype=int32)
:end:

*** clip_by_value

#+begin_src ipython
  a = tf.constant([1, 2, 3])
  print(tf.clip_by_value(a, 1, 2))
  # min, max 可以是一个 shape 为 a.shape 的 tensor
  print(tf.clip_by_value(a, [1, 2, 3], 3))
  #或者可以 broadcast_to (a) 
  print(tf.clip_by_value(a, [1], 3))
#+end_src

#+RESULTS:
:results:
tf.Tensor([1 2 2], shape=(3,), dtype=int32)
tf.Tensor([1 2 3], shape=(3,), dtype=int32)
tf.Tensor([1 2 3], shape=(3,), dtype=int32)
:end:

*** concat

#+begin_src ipython
  a = tf.constant([[1, 2, 3]])
  b = tf.constant([[4, 5, 6]])
  # concat 没有默认的 axis
  print(tf.concat([a, b],axis=0))
  print(tf.concat([a, b],axis=1))
#+end_src

#+RESULTS:
:results:
tf.Tensor(
[[1 2 3]
 [4 5 6]], shape=(2, 3), dtype=int32)
tf.Tensor([[1 2 3 4 5 6]], shape=(1, 6), dtype=int32)
:end:

** 运算

#+begin_src ipython
  print("=== abs")
  print(tf.abs(tf.constant([-1,0,1])))

  print("=== add")
  a = tf.constant([1, 2])
  print(tf.add(a, a))
  print(a + a)
  print(a + 1)
  print(tf.add_n([a, a, a]))

  print("=== subtract")
  a = tf.constant([1,2,3])
  b = tf.constant([0, 1, 2])
  print(tf.subtract(a, b))
  print(a - b)

  print("=== argmax / argmin")
  print(tf.argmax([1, 2, 3]))
  a = tf.constant([[1, 2, 3], [4, 5, 6]])
  print(a.shape)
  print(tf.argmax(a))
  print(tf.argmax(a,axis=0))
  print(tf.argmax(a,axis=1))

  print("=== argsort")
  print(tf.argsort ([3, 2, 1]))
  print(tf.argsort([3, 2, 1], direction="DESCENDING"))
  a = tf.constant([[3, 2, 1], [1, 2, 3]])
  print(tf.argsort (a))
  # argsort 默认的 axis 是 -1 而不是 0
  print(tf.argsort (a,axis=-1))
  print(tf.argsort (a, axis=0))
#+end_src

#+RESULTS:
:results:
=== abs
tf.Tensor([1 0 1], shape=(3,), dtype=int32)
=== add
tf.Tensor([2 4], shape=(2,), dtype=int32)
tf.Tensor([2 4], shape=(2,), dtype=int32)
tf.Tensor([2 3], shape=(2,), dtype=int32)
tf.Tensor([3 6], shape=(2,), dtype=int32)
=== subtract
tf.Tensor([1 1 1], shape=(3,), dtype=int32)
tf.Tensor([1 1 1], shape=(3,), dtype=int32)
=== argmax / argmin
tf.Tensor(2, shape=(), dtype=int64)
(2, 3)
tf.Tensor([1 1 1], shape=(3,), dtype=int64)
tf.Tensor([1 1 1], shape=(3,), dtype=int64)
tf.Tensor([2 2], shape=(2,), dtype=int64)
=== argsort
tf.Tensor([2 1 0], shape=(3,), dtype=int32)
tf.Tensor([0 1 2], shape=(3,), dtype=int32)
tf.Tensor(
[[2 1 0]
 [0 1 2]], shape=(2, 3), dtype=int32)
tf.Tensor(
[[2 1 0]
 [0 1 2]], shape=(2, 3), dtype=int32)
tf.Tensor(
[[1 0 0]
 [0 1 1]], shape=(2, 3), dtype=int32)
:end:


